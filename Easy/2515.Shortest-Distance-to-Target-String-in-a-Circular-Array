class Solution {
    public int closetTarget(String[] words, String target, int startIndex) {
        int i=startIndex;
        int n=words.length;
        int clockWise=0;
        while(!words[i].equals(target)){
            i=(i+1)%words.length;
            clockWise++;
            if(clockWise>=n)break;
        }
        if(clockWise==n)return -1;
        i=startIndex;
        int counterWise=0;
        while(!words[i].equals(target)){
            i=(i - 1 + n)%words.length;
            counterWise++;
        }
        return Math.min(counterWise,clockWise);
    }
}
class Solution {
    public int closetTarget(String[] words, String target, int startIndex) {
        int right=1,left=1;
        int i=startIndex+1;
        int n=words.length;
        if(words[startIndex].equals(target)){
            return 0;
        }
        while((i%n)!=startIndex){
            if(!words[i%n].equals(target)){
                right++;
            }else{
                break;
            }
            i++;
            if((i%n)==startIndex){
                right=0;
                break;
            }
        }
        i=startIndex-1;
        while(i!=startIndex){
            if(i<0){
                i=n-1;
            }
            if(i==startIndex){
                left=0;
                break;
            }
            if(!words[i].equals(target)){
                left++;
            }else{
                break;
            }
            i--;
        }
        if(left==0 || right==0){
            return -1;
        }
        return Math.min(left,right);
    }
}
