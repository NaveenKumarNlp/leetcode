class Solution {
    public int countVowelSubstrings(String word) {
        return atMostKVowels(word, 5) - atMostKVowels(word, 4);
    }

    boolean isVowel(char c) {
        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
    }
    
    int atMostKVowels(String s, int k) {
        int i = 0;
        Map<Character, Integer> vowelMap = new HashMap<>();
        int count = 0;
        
        for (int j = 0; j < s.length(); j++) {
            char c = s.charAt(j);
            //System.out.println(j+"  "+i);
            // consonant encountered
            if (!isVowel(c)) {
                
                vowelMap.clear();     // clear the map coz new substring will start
                i = j + 1;
                //System.out.println(vowelMap+"   "+i+"   "+j);
                continue;
            }
            
            vowelMap.put(c, vowelMap.getOrDefault(c, 0) + 1);
           // System.out.println(vowelMap.size()+"  "+k+"  "+vowelMap);
            while(vowelMap.size() > k) {
                vowelMap.put(s.charAt(i), vowelMap.get(s.charAt(i)) - 1);
               // System.out.println("inside loop    "+vowelMap.size()+"  "+k+"  "+vowelMap);
                //System.out.println(i);
                if (vowelMap.get(s.charAt(i)) == 0) {
                    vowelMap.remove(s.charAt(i));
                }
                
                i++;
            }
            count += (j - i + 1);
            //System.out.println("j--"+j+"  i--"+i+"  count--"+count);

        }
       // System.out.println(count+" ========================");
        return count;
    }
}

// TC: O(n), SC: O(1)
