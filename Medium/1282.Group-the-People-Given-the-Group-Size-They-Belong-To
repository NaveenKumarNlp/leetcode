class Solution {
    public List<List<Integer>> groupThePeople(int[] groupSizes) {
        Map<Integer,List<Integer>> map=new HashMap<>();
        List<List<Integer>> list=new ArrayList<>();
        for(int i=0;i<groupSizes.length;i++){
            map.putIfAbsent(groupSizes[i], new ArrayList<Integer>());
            map.get(groupSizes[i]).add(i);
            if(map.get(groupSizes[i]).size()==groupSizes[i]){
                list.add(map.get(groupSizes[i]));
                map.put(groupSizes[i], new ArrayList<Integer>());
            }
        }
        return list;
    }
}

class Solution {
    public List<List<Integer>> groupThePeople(int[] groupSizes) {
        Map<Integer,List<Integer>> map=new HashMap<>();
        for(int i=0;i<groupSizes.length;i++){
            map.putIfAbsent(groupSizes[i], new ArrayList<Integer>());
            map.get(groupSizes[i]).add(i);
        }
        List<List<Integer>> list=new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {
            List<Integer> l = entry.getValue();
            if(l.size()>entry.getKey()){
                List<Integer> t=new ArrayList<>();
                for(int j=0;j<l.size();j++){
                    t.add(l.get(j));
                    if(t.size()==entry.getKey() || j+1==l.size()){
                        list.add(t);
                        List<Integer> temp=new ArrayList<>();
                        t=temp;
                    }
                }

            }else{
                list.add(l);
            }
        }
        return list;
    }
}
