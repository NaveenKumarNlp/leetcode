class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        Stack<Integer> st = new Stack<>();
        int n = temperatures.length;
        int[] ans = new int[n];
        
        for(int i = n - 1; i >= 0; i--) {
		
			// Popping all indices with a lower or equal temperature than the current index
            while(!st.isEmpty() && temperatures[i] >= temperatures[st.peek()]) {
                st.pop();
            }
			
			// If the stack still has elements, then the next warmer temperature exists!
            if(!st.isEmpty()) {
                ans[i] = st.peek() - i;
            }
			
			// Inserting current index in the stack: monotonicity is maintained!
            st.push(i);
        }
        
        return ans;
    }
}

class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        int len=temperatures.length;
        int []answer=new int[len];
        for(int i=len-2;i>=0;i--){
            int count=0;
            for(int j=i+1;j<len;j++){
                if(temperatures[i]>temperatures[j]){
                    count++;
                    if(j==len-1){
                        count=0;
                        break;
                    }
                }else if(temperatures[i]==temperatures[j]){
                    if(answer[j]==0){
                        count=0;
                        break;
                    }else{
                        count+=answer[j]+1;
                        break;
                    }
                }else{
                    count++;
                    break;
                }
            }
            answer[i]=count;
        }
        return answer;
    }
}
