class Solution {
    public int[][] matrixBlockSum(int[][] mat, int K) {
        int m = mat.length, n = mat[0].length;
        int[][] sum = new int[m + 1][n + 1]; // sum[i][j] is sum of all elements from rectangle (0,0,i,j) as left, top, right, bottom corresponding
        for (int r = 1; r <= m; r++) {
            for (int c = 1; c <= n; c++) {
                sum[r][c] = mat[r - 1][c - 1] + sum[r - 1][c] + sum[r][c - 1] - sum[r - 1][c - 1];
            }
        }
        int[][] ans = new int[m][n];
        for (int r = 0; r < m; r++) {
            for (int c = 0; c < n; c++) {
                int r1 = Math.max(0, r - K), c1 = Math.max(0, c - K);
                int r2 = Math.min(m - 1, r + K), c2 = Math.min(n - 1, c + K);
                r1++; c1++; r2++; c2++; // Since `sum` start with 1 so we need to increase r1, c1, r2, c2 by 1
                //System.out.println(r1+" "+c1+" "+r2+" "+c2);
                //System.out.println(r2+""+c2+" - "+r2+""+(c1-1)+" - "+(r1-1)+""+c2+" + "+(r1-1)+""+(c1-1));
                ans[r][c] = sum[r2][c2] - sum[r2][c1-1] - sum[r1-1][c2] + sum[r1-1][c1-1];
                //System.out.println(ans[r][c]);
            }
        }
        return ans;
    }
}

class Solution {
    public int[][] matrixBlockSum(int[][] mat, int k) {
        int [][]ans=new int[mat.length][mat[0].length];
        for(int i=0;i<mat.length;i++){
            for(int j=0;j<mat[0].length;j++){
                int sum=0;
                for(int r=(i-k);r<=(i+k) && r<mat.length;r++){
                    for(int c=(j-k);r>=0 && c<=(j+k)&& c<mat[0].length;c++){
                        if(c>=0){
                            sum+=mat[r][c];
                        }
                    }
                }
                System.out.println(sum);
                ans[i][j]=sum;
            }
        }
        return ans;
    }
}
