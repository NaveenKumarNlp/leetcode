class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int n=matrix.length;
        int start=0,end=n-1,value=1;
        int rowend=matrix.length-1;
        int colend=matrix[0].length-1;
        int count=matrix.length*matrix[0].length;
        System.out.println(count);
        List<Integer> list=new ArrayList<>();
        for(int i=0;i<(n+1)/2;i++){

            for(int col=start;col<=colend;col++){
                if(count>=value){
                list.add(matrix[start][col]);
                value++;
                }
                
            }

            for(int row=start+1;row<rowend;row++){
                if(count>=value){
                list.add(matrix[row][colend]);
                value++;
                }
            }

            for(int col=colend;col>=start;col--){
                if(count>=value){
                    list.add(matrix[rowend][col]);
                    value++;
                }
                
            }

            for(int row=rowend-1;row>start;row--){
                if(count>=value){
                list.add(matrix[row][start]);
                value++;
                }
            }
            start++;
            rowend--;
            colend--;
        }
        //list.subList(count, list.size()).clear();
        return list;
    }
}
