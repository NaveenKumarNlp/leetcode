class Solution {
    public String evaluate(String s, List<List<String>> knowledge) {
        HashMap<String,String> map=new HashMap<>();
        for(int i=0;i<knowledge.size();i++){
            map.put(knowledge.get(i).get(0),knowledge.get(i).get(1));
        }
        StringBuilder sb=new StringBuilder();
        boolean flag=true;
        int start=0,end=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='('){
                start=i+1;
                flag=false;
            }else if(s.charAt(i)==')'){
                end=i;
                if(map.containsKey(s.substring(start,end))){
                    sb.append(map.get(s.substring(start,end)));
                }else if(!flag){
                    sb.append('?');
                }else{
                    sb.append(s.charAt(i));
                }
                flag=true;
            }else if(flag){
                sb.append(s.charAt(i));
            }
        }
        return sb.toString();
    }
}
class Solution {
    public String evaluate(String s, List<List<String>> knowledge) {
        Map<String, String> map = new HashMap<>();

        for (List<String> list : knowledge) {
            map.put(list.get(0), list.get(1));
        }

        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '(') {
                sb.append(s.charAt(i));
            }
            else if (s.charAt(i) == '(') {
                int start = i + 1;
                while (i < s.length() && s.charAt(i) != ')') {
                    i++;
                }
                sb.append(map.getOrDefault(s.substring(start, i), "?"));
            }
        }

        return sb.toString();
    }
}

// TC: O(n), SC: (k)
// n -> length of string
// k -> length of map
