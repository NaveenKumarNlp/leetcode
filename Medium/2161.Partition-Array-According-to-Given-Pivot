//in-place update but time complexity is high
class Solution {
    public int[] pivotArray(int[] nums, int pivot) {
        int gate=nums.length-1;;
        for(int i=0;i<nums.length;i++){
            if(nums[i]>pivot && i<=gate ){
                int temp=nums[i];
                for(int j=i+1;j<nums.length;j++){
                    nums[j-1]=nums[j];
                }
                nums[nums.length-1]=temp;
                i--;
                gate--;
            }else if(nums[i]==pivot && i<gate){
                for(int k=i;k<gate;k++){
                    nums[k]=nums[k+1];
                }
                nums[gate]=pivot;
                i--;
                gate--;
            }
        }
        return nums;
    }
}

// Time complexity = 2n = O(n)
// Space complexity = O(1), or O(n) if the result array is including in the complexity analysis.

class Solution {
    public int[] pivotArray(int[] nums, int pivot) {
        int[] result = new int[nums.length];
        int left = 0, right = nums.length - 1;
        
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] < pivot) {
                result[left++] = nums[i];
            }
            if(nums[nums.length - 1 - i] > pivot) {
                result[right--] = nums[nums.length - 1 - i];
            }
        }
        
        while(left <= right) {
            result[left++] = pivot;
            result[right--] = pivot;
        }
        
        return result;
    } 
}


class Solution {
    public int[] pivotArray(int[] nums, int pivot) {
    {
        int low = 0;
        int same = 0;
        int high;
        for (int n : nums)
        {
            if (n < pivot)
            {
                ++low;
            }
            else if (n == pivot)
            {
                ++same;
            }
        }
        int []res=new int[nums.length];
        high = same + low;
        same = low;
        low = 0;
        for (int n : nums)
        {
            if (n < pivot)
            {
                res[low++] = n;
            }
            else if (n == pivot)
            {
                res[same++] = n;
            }
            else
            {
                res[high++] = n;
            }
        }
        return res;
    }
};
