class Solution {
    public int[] getMaximumXor(int[] nums, int maximumBit) {
        for(int i=1;i<nums.length;i++){
            nums[i]=nums[i]^nums[i-1];
        }
        for(int i=0;i<nums.length;i++){
            nums[i]=nums[i]^((int)(Math.pow(2,maximumBit))-1);
        }
        int i=0,j=nums.length-1;
        while(i<j){
            int temp=nums[i];
            nums[i]=nums[j];
            nums[j]=temp;
            i++;
            j--;
        }
        return nums;
    }
}

class Solution {
    public int[] getMaximumXor(int[] nums, int maximumBit) {
        int[] xors = new int[nums.length];
        xors[0] = nums[0];
        for(int i=1;i<nums.length;i++)
            xors[i] = xors[i-1]^nums[i];
        
        int[] ans = new int[nums.length];
        int max = (int)Math.pow(2,maximumBit)-1;
        for(int i=0;i<nums.length;i++)
            ans[nums.length-1-i] = max^xors[i];
        return ans;
    }
}
