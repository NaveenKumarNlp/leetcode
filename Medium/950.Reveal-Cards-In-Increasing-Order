class Solution {
    public int[] deckRevealedIncreasing(int[] deck) {
        Queue<Integer> list = new LinkedList<>();
        Arrays.sort(deck);
        if(deck.length<3){
            return deck;
        }
        for(int i=deck.length-1;i>=0;i--){
            if(list.size()>1){
                list.add(list.poll());
            }
            list.add(deck[i]);
        }
        for(int i=deck.length-1;i>=0;i--){
            deck[i]=list.poll();
        }
        return deck;
    }
}

class Solution {
    public int[] deckRevealedIncreasing(int[] deck) {
        
        if(deck.length==1)
            return deck;
        
        Arrays.sort(deck);
        int res[] = new int[deck.length];
        int k = 1;
        int c = 0;
        res[0] = deck[0];
        
        // insert the elements from the sorted array into every 2nd empty slot of result array
        while(k<deck.length)
        {
           for(int i=1;i<deck.length;i++)
           {               
                if(res[i]==0)
                {
                    c++;
                    if(c==2)
                    {
                        res[i] = deck[k++];
                        c=0;
                    }
                }
            }
        }

        return res;
    }
}
