class Solution {
    public String simplifyPath(String path) {
        Stack<String> st=new Stack();
        for(int i=0;i<path.length();i++){
            if(path.charAt(i)=='/' && i+1<path.length() && path.charAt(i+1)=='/'){
                continue;
            }else if(path.charAt(i)=='/'){
                int left=i;
                i++;
                int count=0,let=0;
                while(i<path.length() && path.charAt(i)!='/'){
                    if(path.charAt(i)=='.'){
                        count++;
                    }else {
                        let++;;
                    }
                    i++;
                }
                
                if(let==0){
                    if(count==2){
                        if(!st.isEmpty()){
                            st.pop();
                        }
                    }else if(count>=3){
                        st.push(path.substring(left,i));
                    }
                }else{
                    st.push(path.substring(left,i));
                }
                if(i!=path.length()){
                    i--;
                }
            }
        }
        if(st.isEmpty()){
            return "/";
        }
        StringBuilder sb=new StringBuilder();
        for(String str:st){
            sb.append(str);
        }
        return sb.toString();
    }
}

class Solution {
    public String simplifyPath(String path) {
        Stack<String> stack = new Stack<>(); // create a stack to keep track of directories
        String[] directories = path.split("/"); // split the path by slash '/'
        for (String dir : directories) { // iterate over the directories
            if (dir.equals(".") || dir.isEmpty()) { // ignore the current directory '.' and empty directories
                continue;
            } else if (dir.equals("..")) { // go one level up for double period '..'
                if (!stack.isEmpty()) { // if stack is not empty, pop the top element
                    stack.pop();
                }
            } else { // for any other directory, push it to the stack
                stack.push(dir);
            }
        }
        return "/" + String.join("/", stack); // join the directories in the stack with slash '/' and add a slash at the beginning
    }
}
