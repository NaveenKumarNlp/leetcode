class Solution {
    public int[] kWeakestRows(int[][] mat, int k) {
        int []answer=new int[k];
        int [][] temp=new int[mat.length][2];
        for(int i=0;i<mat.length;i++){
            int count=0;
            for(int j=0;j<mat[i].length;j++){
                if(mat[i][j]==1){
                    count++;
                }
                else{
                    break;
                }
            }
            temp[i][0]=i;
            temp[i][1]=count;
        }


        for(int i=0;i<temp.length-1;i++){
            for(int j=i+1;j<temp.length;j++){
                if(temp[i][1]>temp[j][1] || (temp[i][1]==temp[j][1] && temp[i][0]>temp[j][0])){
                    int temp1=temp[i][0];
                    temp[i][0]=temp[j][0];                                                            ----> Arrays.sort(temp, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);
                    temp[j][0]=temp1;                                         
                    int temp2=temp[i][1];
                    temp[i][1]=temp[j][1];
                    temp[j][1]=temp2;
                }
            }
        }
        for(int i=0;i<k;i++){
            answer[i]=temp[i][0];
        }
        return answer;
    }
}


class Solution {
    public int[] kWeakestRows(int[][] mat, int k) {
        int []answer=new int[k];
        int [] temp=new int[mat.length];
        for(int i=0;i<mat.length;i++){
            int count=0;
            for(int j=0;j<mat[i].length;j++){
                if(mat[i][j]==1){
                    count++;
                }
                else{
                    break;
                }
            }
            temp[i]=count;
        }

        
        for(int i=0;i<k;i++){
            int min=Integer.MAX_VALUE;
            int min_index=0;
            for(int j=0;j<temp.length;j++){
                if(temp[j]<min){
                    min=temp[j];
                    min_index=j;
                }
            }
            answer[i]=min_index;
            temp[min_index]=Integer.MAX_VALUE;
        }
        return answer;
    }
}
